/**
* Medusa browser beta
* @description Core functions
* @author Andrea Porcella
* @copyright Andrea Porcella / Bellville-system 2023
*/

import { TabsGroupWrapper } from './components/TabsBarWrapper';
import { Tab } from './components/Tab'
import { LogElement } from './model';

/**
 * Generates a random hexadecimal color code.
 *
 * @returns {string} A string representing a random color in the format `#RRGGBB`.
 * The color is generated by creating a random number, converting it to a hexadecimal
 * string, and ensuring it is padded to 6 characters.
 */
export function generateRandomColor() {
  const maxVal = 0xFFFFFF; // 16777215
  let randomNumber = Math.random() * maxVal;
  randomNumber = Math.floor(randomNumber);
  const randomString = randomNumber.toString(16);
  const randColor = randomString.padStart(6, randomString);
  return `#${randColor.toUpperCase()}`
}

/**
 * Emits a custom event from the specified emitter.
 *
 * @param emitter - The object from which the event will be dispatched. 
 *                  It can be an instance of `TabsGroupWrapper` or `Tab`.
 * @param type - The type (name) of the event to emit.
 * @param args - An array of arguments to include in the event's `detail` property.
 *
 * The event is dispatched with the following options:
 * - `bubbles: true` - The event bubbles up through the DOM.
 * - `composed: true` - The event can cross the shadow DOM boundary.
 * - `detail: args` - The custom data passed with the event.
 *
 * Example usage:
 * ```typescript
 * emit(tabInstance, 'tab-activated', [tabId, tabName]);
 * ```
 */
export function emit(emitter: TabsGroupWrapper | Tab, type: string, args: any[]) {
  console.log('EVENT EMIT : ', emitter, type)
  emitter.dispatchEvent(new CustomEvent(type, { bubbles: true, composed: true, detail: args }));
}

/**
 * Attaches an event listener to the specified emitter for a given event type.
 *
 * @param emitter - The object to which the event listener will be attached. 
 *                   It can be an instance of `TabsGroupWrapper` or `Tab`.
 * @param type - The type of event to listen for (e.g., 'click', 'change').
 * @param fn - The callback function to execute when the event is triggered.
 *             It receives the event's `detail` property as its argument.
 * @param options - Optional additional options for the event listener.
 *                  This is an object with key-value pairs that can be used
 *                  to configure the listener.
 */
export function on(emitter: TabsGroupWrapper | Tab, type: string, fn: (detail: string) => void, options?: { [key: string]: any }) {
  console.log('EVENT ON', emitter, type)
  emitter.addEventListener(type, ((e: CustomEvent) => fn.apply(e.detail)));
}

/**
 * Logs a styled message to the console with optional class name, reference, message, and arguments.
 * The log message is styled using CSS for better visual distinction.
 *
 * @param options - An object containing the log details.
 * @param options.className - A string representing the class name to be displayed in the log (default: empty string).
 * @param options.ref - A string representing a reference or identifier to be displayed in the log (default: empty string).
 * @param options.message - A string representing the main message to be displayed in the log (default: empty string).
 * @param options.args - Additional arguments to be logged (default: empty string).
 * @param options.color - A string representing a custom color for the log message. If provided, it modifies the default colors.
 *
 * The log message is divided into three parts:
 * - `className` is styled with the first color.
 * - `ref` is styled with the second color.
 * - `message` is styled with the third color.
 *
 * The function uses `console.trace` to log the message along with the provided arguments.
 */
export function appLog(options:LogElement){

  const color = ['#7E57C2', '#ffc100', '#dddddd'];

  if(!options.className) {options.className = ''}
  if(!options.ref) {options.ref = ''}
  if(!options.message){options.message = ''}
  if(!options.args){options.args = ''}
  if(options.color){
    if(!options.ref && options.message){color[2] = options.color}
    else {color[1] = options.color}
  }
  
  const strMess = `%c${options.className}%c${options.ref}%c${options.message}`;

  return console.trace(strMess,  
    `background-color:${color[0]};color:#fff;margin-left:4px;padding:2px;border-radius:3px`, 
    `background-color:${color[1]};margin-left:4px;padding:2px;border-radius:3px`, 
    `background-color:${color[2]};margin-left:2px;margin-left:4px;padding:2px;border-radius:3px`, 
    options.args);
    
}


