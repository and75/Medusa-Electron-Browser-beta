/**
* Medusa browser beta
* @description Electron main process
* @author Andrea Porcella
* @copyright Andrea Porcella / Bellville-system 2023
*/

import { app, BrowserWindow, ipcMain, session, webContents } from 'electron';

import { store } from './store';
// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
let mainWindow: BrowserWindow = null;
let bookmarkWindows:BrowserWindow = null;

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const BOOKMARKS_WINDOW_WEBPACK_ENTRY: string;
declare const BOOKMARKS_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const WEBVIEW_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const initApp = async () => {

  createWindow();

  ipcMain.on('get-webviewpreload-path', (e) => {
    e.returnValue = WEBVIEW_WINDOW_PRELOAD_WEBPACK_ENTRY;
  });

  ipcMain.on('ipc-get-default', async (event, arg) => {
    const reply = store.getTabsGroups();
    event.reply('ipc-get-default', reply);
  });

  ipcMain.on('ipc-set-active-tab', async (event, arg) => {
    event.reply('ipc-set-active-tab', arg);
  });

  ipcMain.on('ipc-close-tab', async (event, arg) => {
    //console.log('ipc-close-tab', arg)
    event.reply('ipc-close-tab', arg);
  });

  ipcMain.on('ipc-set-new-tab', async (event, arg) => {
    event.reply('ipc-set-new-tab', store.getDefaultTab())
  });

  ipcMain.on('ipc-open-contextmenu', async (event, arg) => {
    event.reply('ipc-open-contextmenu', arg)
  });

  ipcMain.on('ipc-hide-context-menu', async (event, args) => {
    console.log('ipc-hide-context-menu')
    event.reply('ipc-hide-context-menu',args)
  });

  ipcMain.on('ipc-page-favicon-updated', async (event, arg) => {
    //console.log('ipc-page-favicon-updated : ', arg);
    event.reply('ipc-page-favicon-updated', arg)
  });

  ipcMain.on('ipc-update-tab-title', async (event, arg) => {
    //console.log('ipc-update-tab-title : ', arg);
    event.reply('ipc-update-tab-title', arg)
  });

  ipcMain.on('ipc-page-loading-stop', async (event, arg) => {
    //console.log('ipc-page-loading-stop : ', arg);
    event.reply('ipc-page-loading-stop', arg)
  });

  ipcMain.on('ipc-page-loading-start', async (event, arg) => {
    //console.log('ipc-page-loading-start : ', arg);
    event.reply('ipc-page-loading-start', arg)
  });

  ipcMain.on('ipc-open-sidepanel', async (event, arg) => {
    //console.log('ipc-open-sidepanel : ', arg);
    event.reply('ipc-open-sidepanel', arg)
  });

  ipcMain.on('ipc-open-add-bookmark', async (event, arg) => {
    console.log('ipc-open-add-bookmark : ', bookmarkWindows);
    if(!bookmarkWindows){

      bookmarkWindows = new BrowserWindow({
        parent: mainWindow,
        modal:true,
        height: 250,
        width: 500,
        icon: './icon/icon.png',
        show: false,
        fullscreenable : false,
        autoHideMenuBar: true,
        center:true,
        resizable :false,
        backgroundColor:'#ffffff',
        webPreferences: {
          preload:BOOKMARKS_WINDOW_PRELOAD_WEBPACK_ENTRY,
          contextIsolation: true,
          sandbox: true,
        },
        /*titleBarStyle: 'hidden',
        titleBarOverlay: {
          color: '#f2f0ec',
          symbolColor: '#000'
        }*/
      });
    
      bookmarkWindows.loadURL(BOOKMARKS_WINDOW_WEBPACK_ENTRY);

      bookmarkWindows.once('ready-to-show', () => {
        bookmarkWindows.show();
        //bookmarkWindows.webContents.openDevTools();
      });

      bookmarkWindows.webContents.on('dom-ready', ()=>{
        console.log('bokmarkpannel dom-ready')
        bookmarkWindows.webContents.send('bookmark-infos', arg);
      });

      bookmarkWindows.on('closed', ()=>{
        console.log('bokmarkpannel is closed')
        bookmarkWindows=null;
      });

    } 
    
  });
}


const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    icon: './icon/icon.png',
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      sandbox: true,
      webviewTag: true
    },
    /*titleBarStyle: 'hidden',
    titleBarOverlay: {
      color: '#f2f0ec',
      symbolColor: '#000'
    }*/
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();


};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', initApp);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


/**
 * SECURING THE ELECTRON APPLICATION
*/

/**
 * Basic Security controllos for IPC.
 */
//17. Validate the sender of all IPC messages



/**
 * Basic Security controllos for session.
 */


app.on('ready', () => {

  //Handle session permission requests from remote content
  session
    .fromPartition('medusabwebview')
    .setPermissionRequestHandler((webContents, permission, callback) => {

      const parsedUrl = new URL(webContents.getURL())
      
      if (permission === 'notifications') {
        // Approves the permissions request
        callback(true)
      }

      // Verify URL
      if (parsedUrl.protocol !== 'https:' && parsedUrl.protocol !== 'http:') {
        // Denies the permissions request
        return callback(false)
      }
    })

  //Define a Content Security Policy
  session
    .fromPartition('medusabwebview').webRequest.onHeadersReceived((details, callback) => {
      //console.log('OnHeadersReceived : ', details)
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          //'Content-Security-Policy': [`default-src`]
        }
      })
    })
});


/**
 * Basic Security controllos for webview.
 */
app.on('web-contents-created', (event, contents) => {

  //15. Do not use shell.openExternal with untrusted content
  contents.setWindowOpenHandler(({ url }) => {
    // In this example, we'll ask the operating system
    // to open this event's url in the default browser.
    //
    // See the following item for considerations regarding what
    // URLs should be allowed through to shell.openExternal.
    /*if (isSafeForExternalOpen(url)) {
      setImmediate(() => {
        shell.openExternal(url)
      })
    }*/

    return { action: 'deny' }
  })

  contents.on('will-attach-webview', (event, webPreferences, params) => {

    // Do not enable Node.js integration for remote content
    webPreferences.nodeIntegration = false;
    //Enable Context Isolation
    webPreferences.contextIsolation = true;
    //Enable process sandboxing
    webPreferences.sandbox = true;
    //Enable webSecurity
    webPreferences.webSecurity = true;
    //Disable Running Insecure Content
    webPreferences.allowRunningInsecureContent = false;
    //Disable Running Insecure Content
    webPreferences.plugins = false;

    //Init preload
    // Strip away preload scripts if unused or verify their location is legitimate
    //delete webPreferences.preload
    webPreferences.preload = WEBVIEW_WINDOW_PRELOAD_WEBPACK_ENTRY; //: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY

    webPreferences.partition = 'medusabwebview'

    // Verify URL being loaded
    if (!params.src.startsWith('https') || !params.src.startsWith('https')) {
      //event.preventDefault()
      //console.error('This url is not allowed : ' + params.src)
    }

  })

  contents.on('did-attach-webview', (event, webContents) => {
    // console.log('Main did-attach-webview', webContents)
  })

})




