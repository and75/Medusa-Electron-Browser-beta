name: Deploy Electron App

on:
  push:
    tags:
      - '*'  # Il workflow parte quando viene creato un tag

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        node-version: [20.x]  # Usa Node.js 20

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get version from tag and OS
        shell: pwsh
        run: |
          $version = $env:GITHUB_REF_NAME -replace 'v', ''
          $os = "${{ matrix.os }}" -replace '-latest', ''
          echo "APP_VERSION=$version-$os" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
        if: runner.os == 'Windows'

      - name: Get version from tag and OS (Linux/macOS)
        run: |
          version=${GITHUB_REF_NAME#refs/tags/v}
          os=$(echo "${{ matrix.os }}" | sed 's/-latest//')
          echo "APP_VERSION=$version-$os" >> $GITHUB_ENV
        if: runner.os != 'Windows'

      - name: Update package.json version
        shell: pwsh
        run: |
          $packageJson = Get-Content package.json | ConvertFrom-Json
          $packageJson.version = "${{ env.APP_VERSION }}"
          $packageJson | ConvertTo-Json -Depth 10 | Set-Content package.json -Encoding utf8
        if: runner.os == 'Windows'

      - name: Update package.json version (Linux/macOS)
        run: |
          jq '.version = "${{ env.APP_VERSION }}"' package.json > temp.json && mv temp.json package.json
        if: runner.os != 'Windows'

      - name: Install dependencies
        run: npm ci  # Installazione pulita

      - name: Build Electron App
        run: npm run make  # Genera i pacchetti per ogni OS

      - name: Publish Release
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOYTOKEN }}
        run: npx electron-forge publish --verbose
